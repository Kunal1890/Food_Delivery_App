package com.mealkings.Order.service;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.mealkings.Order.entity.Cart;
import com.mealkings.Order.entity.CartItem;
import com.mealkings.Order.entity.Customer;
import com.mealkings.Order.entity.Order;
import com.mealkings.Order.entity.Restaurant;
import com.mealkings.Order.repository.CartRepository;
import com.mealkings.Order.repository.CustomerRepository;
import com.mealkings.Order.repository.OrderRepository;
import com.mealkings.Order.repository.RestaurantRepository;
import com.mealkings.Order.exceptions.IDNotFoundException;

@Component
public class OrderOpsImpl implements OrderOps {
	
	@Autowired
	private OrderRepository orepo;	
	
	@Autowired
	private CustomerRepository crepo;	
	
	@Autowired
	private RestaurantRepository rrepo;	
	
	@Autowired
	private CartRepository cartrepo;	

	@Override
	public List<Order> getActiveOrderByRestaurant(long restaurant_id) {
		
		Iterable<Order> allOrders = orepo.findAll();
		List<Order> activeOrders = new ArrayList<Order>();
		
		for(Order order:allOrders)
			if((order.getRestaurant().getRestaurantId() == restaurant_id) && (order.getOrderStatus().equalsIgnoreCase("active")))
				activeOrders.add(order);
		
		return activeOrders;
	}

	@Override
	public List<Order> getPastOrderByRestaurant(long restaurant_id) {

		Iterable<Order> allOrders = orepo.findAll();
		List<Order> pastOrders = new ArrayList<Order>();
		
		for(Order order:allOrders)
			if((order.getRestaurant().getRestaurantId() == restaurant_id) && !(order.getOrderStatus().equalsIgnoreCase("active")))
				pastOrders.add(order);
		
		return pastOrders;
	}

	@Override
	public void updateOrderStatus(long order_id, String status) throws IDNotFoundException {
		Order order = orepo.findById(order_id)
	            .orElseThrow(() -> new IDNotFoundException("Order either inactive or not present!"));
		order.setOrderStatus(status);

		orepo.save(order);
	}

	@Override
	public List<Order> getActiveOrderByUser(long user_id) {
		Iterable<Order> allOrders = orepo.findAll();
		List<Order> pastOrders = new ArrayList<Order>();
		
		for(Order order:allOrders)
			if((order.getCustomer().getCustomerId() == user_id) && !(order.getOrderStatus().equalsIgnoreCase("completed")))
				pastOrders.add(order);
		
		return pastOrders;
	}

	@Override
	public List<Order> getPastOrderByUser(long user_id) {
		Iterable<Order> allOrders = orepo.findAll();
		List<Order> activeOrders = new ArrayList<Order>();
		
		for(Order order:allOrders)
			if((order.getCustomer().getCustomerId() == user_id) && !(order.getOrderStatus().equalsIgnoreCase("active")))
				activeOrders.add(order);
		
		return activeOrders;
	}

	@Override
	public void addOrder(long customer_id, long restaurant_id, long cart_id, Order order) throws IDNotFoundException {
		Customer customer = crepo.findById(customer_id).orElseThrow(() -> new IDNotFoundException("Customer with ID - "+customer_id+" does not exist"));
		Restaurant restaurant = rrepo.findById(restaurant_id).orElseThrow(() -> new IDNotFoundException("Restaurant with ID - "+restaurant_id+" does not exist"));
		Cart cart = cartrepo.findById(cart_id) .orElseThrow(() -> new IDNotFoundException("Cart with ID - "+restaurant_id+" does not exist"));
		
		double totalAmount = cart.getItems().stream()
			    .mapToDouble(CartItem::getTotalPrice)
			    .sum();
		
		if(order.isDiscountApplied())
			order.setTotalAmount(totalAmount*(1-0.01*order.getDiscountAmount()));
		else
			order.setTotalAmount(totalAmount);
		
		order.setOrderStatus("PLACED");
		order.setOrderDate(new Timestamp(System.currentTimeMillis()));
		order.setDeliverAddress(customer.getAddress());
		order.setCustomer(customer);
		order.setRestaurant(restaurant);
		
		orepo.save(order);
		
	}

	@Override
	public void cancelOrder(long order_id) throws IDNotFoundException {
		Order order = orepo.findById(order_id).orElseThrow(()-> new IDNotFoundException("Order with ID - "+order_id+" not found!"));
		order.setOrderStatus("CANCELLED");
		orepo.save(order);
	}

}
