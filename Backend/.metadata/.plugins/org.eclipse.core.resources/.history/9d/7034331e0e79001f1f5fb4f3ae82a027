package com.mealkings.cart.service;

import com.mealkings.cart.entity.Cart;
import com.mealkings.cart.entity.CartItem;
import com.mealkings.cart.exceptions.CartNotFoundException;
import com.mealkings.cart.exceptions.CartAlreadyExistsException;
import com.mealkings.cart.repository.CartRepository;
import com.mealkings.cart.service.CartService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class CartImpl implements CartDAO {

    @Autowired
    private CartRepository cartRepository;

    @Override
    public Cart createCart(Cart cart) {
        // Check if a cart for the user ID already exists
        Cart existingCart = cartRepository.findByCustomer_CustomerId(cart.getCustomer().getCustomer_id());
        if (existingCart != null) {
            // Throw custom exception if cart already exists
            throw new CartAlreadyExistsException("Cart already exists for user ID: " + cart.getCustomer().getCustomer_id());
        }
        // If no cart exists, save and return the new cart
        return cartRepository.save(cart);
    }

    @Override
    public Cart getCartByUserId(Long userId) {
        return cartRepository.findByUser_UserId(userId);
    }

    @Override
    public List<Cart> getAllCarts() {
        return cartRepository.findAll();
    }

    @Override
    public void addItemToCart(Long userId, CartItem item) {
        Cart cart = cartRepository.findByUser_UserId(userId);
        if (cart == null) {
            throw new CartNotFoundException("Cart not found for user ID: " + userId);
        }
        // Add item to the cart's item list
        cart.getItems().add(item);
        cartRepository.save(cart);
    }

    @Override
    public void removeItemFromCart(Long userId, Long itemId) {
        Cart cart = cartRepository.findByUser_UserId(userId);
        if (cart == null) {
            throw new CartNotFoundException("Cart not found for user ID: " + userId);
        }
        // Find and remove the item from the cart's item list
        cart.getItems().removeIf(item -> item.getId().equals(itemId));
        cartRepository.save(cart);
    }

    @Override
    public List<CartItem> viewCartItems(Long userId) {
        Cart cart = cartRepository.findByUser_UserId(userId);
        if (cart == null) {
            throw new CartNotFoundException("Cart not found for user ID: " + userId);
        }
        return cart.getItems();
    }

	@Override
	public void deleteCart(Long userId) {
		// TODO Auto-generated method stub
		
	}
}
