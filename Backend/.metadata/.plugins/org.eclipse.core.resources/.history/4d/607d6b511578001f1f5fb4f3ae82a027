package com.mealkings.authentication.service;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.stereotype.Service;

import com.mealkings.authentication.entity.Credentials;
import com.mealkings.authentication.repository.UserRepository;

import java.util.List;
import java.util.Optional;

@Service
public class CustomUserDetailsService implements UserDetailsService {

    private final UserRepository userRepository;

    public CustomUserDetailsService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @Override
    public UserDetails loadUserByUsername(String loginCred) throws UsernameNotFoundException {
        
        if (userRepository.findByEmail(loginCred).isEmpty() || userRepository.findByUsername(loginCred).isEmpty()) {
            throw new UsernameNotFoundException("User not found with creds: " + loginCred);
        }
        
        Credentials user;
        
        if(userRepository.findByEmail(loginCred).isPresent())
        {
        	ser = userRepository.findByEmail(loginCred).get();
        }
        else
        	user = userRepository.findByUsername(loginCred).get();
        
        return new org.springframework.security.core.userdetails.User(
            user.getEmail(),
            user.getPassword(),
            List.of(new SimpleGrantedAuthority(user.getRole())) 
        );
    }
}

